////////////////////////////////////////////////////
// This is an AutoGenerated class created by Rocketlane for its Salesforce integration
// DO NOT EDIT OR DELETE THIS CLASS
////////////////////////////////////////////////////



@isTest
global class TestRLSTAGEWH394 {

    static testMethod void testInsert() {

        Test.setMock(HttpCalloutMock.class, new CalloutMockRLSTAGEWH394());

        Opportunity newObj = new Opportunity();
        List<SObject> newObjList = new List<SObject>();
        newObjList.add(newObj);
    	Map<Id, SObject> newObjMap = new Map<Id, SObject>();
    	newObjMap.put(newObj.Id, newObj);
    	List<SObject> oldObjList = new List<SObject>();
    	Map<Id, SObject> oldObjMap = new Map<Id, SObject>();

        RLSTAGEWH394.TriggerContext tc = new RLSTAGEWH394.TriggerContext(
            Opportunity.sObjectType,
            true,
            true,false,false,false,
            false, true,
            newObjList,
            newObjMap,
            oldObjList,
            oldObjMap,
            1);
        RLSTAGEWH394 webhookPusher = new RLSTAGEWH394(tc,new List<String>(),new List<String>());
        System.enqueueJob(webhookPusher);

    }

    static testMethod void testUpdate() {
        Test.setMock(HttpCalloutMock.class, new CalloutMockRLSTAGEWH394());

        Opportunity oldObj = new Opportunity();
        List<SObject> oldObjList = new List<SObject>();
        oldObjList.add(oldObj);
    	Map<Id, SObject> oldObjMap = new Map<Id, SObject>();
    	oldObjMap.put(oldObj.Id, oldObj);

        Opportunity newObj = new Opportunity();
        List<SObject> newObjList = new List<SObject>();
        newObjList.add(newObj);
    	Map<Id, SObject> newObjMap = new Map<Id, SObject>();
    	newObjMap.put(oldObj.Id, newObj);

        RLSTAGEWH394.TriggerContext tc = new RLSTAGEWH394.TriggerContext(
            Opportunity.sObjectType,
            true,
            false,true,false,false,
            false, true,
            newObjList,
            newObjMap,
            oldObjList,
            oldObjMap,
            1);
        RLSTAGEWH394 webhookPusher = new RLSTAGEWH394(tc,new List<String>(),new List<String>());
        System.enqueueJob(webhookPusher);
    }

    static testMethod void testDelete() {
        Test.setMock(HttpCalloutMock.class, new CalloutMockRLSTAGEWH394());

        Opportunity oldObj = new Opportunity();
        List<SObject> newObjList = new List<SObject>();
        Map<Id, SObject> newObjMap = new Map<Id, SObject>();
        List<SObject> oldObjList = new List<SObject>();
        oldObjList.add(oldObj);
    	Map<Id, SObject> oldObjMap = new Map<Id, SObject>();
    	oldObjMap.put(oldObj.Id, oldObj);

         RLSTAGEWH394.TriggerContext tc = new RLSTAGEWH394.TriggerContext(
            Opportunity.sObjectType,
            true,
            false,false,true,false,
            false, true,
            newObjList,
            newObjMap,
            oldObjList,
            oldObjMap,
            1);
        RLSTAGEWH394 webhookPusher = new RLSTAGEWH394(tc, new List<String>(),new List<String>());
        System.enqueueJob(webhookPusher);
    }



	global class CalloutMockRLSTAGEWH394 implements HttpCalloutMock {
    	global HTTPResponse respond(HTTPRequest req) {
        	HttpResponse res = new HttpResponse();
	        res.setStatusCode(200);
    	    return res;
	    }
	}

}